# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pleco_target_pb2 as pleco__target__pb2


class RecommendationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Recommend = channel.unary_unary(
                '/Recommendations/Recommend',
                request_serializer=pleco__target__pb2.RecommendationRequest.SerializeToString,
                response_deserializer=pleco__target__pb2.RecommendationResponse.FromString,
                )


class RecommendationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Recommend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecommendationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Recommend': grpc.unary_unary_rpc_method_handler(
                    servicer.Recommend,
                    request_deserializer=pleco__target__pb2.RecommendationRequest.FromString,
                    response_serializer=pleco__target__pb2.RecommendationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Recommendations', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Recommendations(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Recommend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Recommendations/Recommend',
            pleco__target__pb2.RecommendationRequest.SerializeToString,
            pleco__target__pb2.RecommendationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class K8sGWStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNSs = channel.unary_unary(
                '/K8sGW/GetNSs',
                request_serializer=pleco__target__pb2.K8sGWRequest.SerializeToString,
                response_deserializer=pleco__target__pb2.K8sGWResponse.FromString,
                )


class K8sGWServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetNSs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_K8sGWServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNSs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNSs,
                    request_deserializer=pleco__target__pb2.K8sGWRequest.FromString,
                    response_serializer=pleco__target__pb2.K8sGWResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'K8sGW', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class K8sGW(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetNSs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/K8sGW/GetNSs',
            pleco__target__pb2.K8sGWRequest.SerializeToString,
            pleco__target__pb2.K8sGWResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
